#lang racket
(define (make-mobile left right)
  (list left right))
(define (make-branch length structure)
  (list length structure))
(define (left-branch mobile)
  (car mobile))
(define (right-branch mobile)
  (cadr mobile))
(define (branch-length branch)
  (car branch))
(define (branch-structure branch)
  (cadr branch))
(define (total-weight mobile)
  (define (weight branch)
    (if (atom? (branch-structure branch))
        (branch-structure branch)
        (total-weight (branch-structure branch))))
  (+ (weight (left-branch mobile))
     (weight (right-branch mobile))))
(define (atom? x)
  (and (not (null? x))
       (not (pair? x))))
(define l (make-branch 1 5))
(define r (make-branch 2 10))
(define m (make-mobile l r))
(define newr (make-branch 6 m))
(define deepm (make-mobile l newr))